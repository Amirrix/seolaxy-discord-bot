#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const readline = require("readline");

// Colors for console output
const colors = {
  reset: "\x1b[0m",
  bright: "\x1b[1m",
  green: "\x1b[32m",
  yellow: "\x1b[33m",
  red: "\x1b[31m",
  cyan: "\x1b[36m",
  blue: "\x1b[34m",
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function log(message, color = "reset") {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(`${colors.cyan}${prompt}${colors.reset}`, resolve);
  });
}

async function setupBot() {
  log("\n🚀 Welcome to Seolaxy Discord Bot Setup!", "bright");
  log("This script will help you configure your Discord bot.\n", "yellow");

  // Check if .env already exists
  const envPath = path.join(process.cwd(), ".env");
  if (fs.existsSync(envPath)) {
    log("⚠️  .env file already exists!", "yellow");
    const overwrite = await question("Do you want to overwrite it? (y/N): ");
    if (overwrite.toLowerCase() !== "y" && overwrite.toLowerCase() !== "yes") {
      log("Setup cancelled.", "yellow");
      rl.close();
      return;
    }
  }

  log(
    "\n📋 Please provide the following information from Discord Developer Portal:",
    "bright"
  );
  log("   (If you need help, check docs/DISCORD_SETUP.md)\n");

  const botToken = await question("🔑 Bot Token: ");
  if (!botToken) {
    log("❌ Bot token is required!", "red");
    rl.close();
    return;
  }

  const clientId = await question("🆔 Client ID (Application ID): ");
  if (!clientId) {
    log("❌ Client ID is required!", "red");
    rl.close();
    return;
  }

  const guildId = await question("🏠 Guild ID (Server ID): ");
  if (!guildId) {
    log("❌ Guild ID is required!", "red");
    rl.close();
    return;
  }

  const nodeEnv =
    (await question(
      "🌍 Environment (development/production) [development]: "
    )) || "development";
  const logLevel =
    (await question("📊 Log Level (error/warn/info/debug) [info]: ")) || "info";

  // Create .env content
  const envContent = `# Discord Bot Configuration
# Generated by setup script on ${new Date().toISOString()}

# Bot Token from Discord Developer Portal
DISCORD_TOKEN=${botToken}

# Application ID (Client ID) from Discord Developer Portal
CLIENT_ID=${clientId}

# Your Discord Server ID (Guild ID)
GUILD_ID=${guildId}

# Environment (development/production)
NODE_ENV=${nodeEnv}

# Log level (error, warn, info, debug)
LOG_LEVEL=${logLevel}
`;

  try {
    fs.writeFileSync(envPath, envContent);
    log("\n✅ .env file created successfully!", "green");
  } catch (error) {
    log(`❌ Error creating .env file: ${error.message}`, "red");
    rl.close();
    return;
  }

  // Create logs directory if it doesn't exist
  const logsDir = path.join(process.cwd(), "logs");
  if (!fs.existsSync(logsDir)) {
    try {
      fs.mkdirSync(logsDir);
      log("✅ Logs directory created successfully!", "green");
    } catch (error) {
      log(
        `⚠️  Warning: Could not create logs directory: ${error.message}`,
        "yellow"
      );
    }
  }

  log("\n🎉 Setup complete! Next steps:", "bright");
  log("1. Install dependencies: npm install", "cyan");
  log("2. Deploy commands: npm run deploy", "cyan");
  log("3. Start the bot: npm start", "cyan");
  log("\n📚 For more information, check the README.md file.", "blue");

  rl.close();
}

// Handle Ctrl+C gracefully
process.on("SIGINT", () => {
  log("\n\n👋 Setup cancelled by user.", "yellow");
  rl.close();
  process.exit(0);
});

// Run setup
setupBot().catch((error) => {
  log(`❌ Setup failed: ${error.message}`, "red");
  rl.close();
  process.exit(1);
});
